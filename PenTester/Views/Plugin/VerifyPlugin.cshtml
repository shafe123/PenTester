@model PenTester.Objects.DynamicPlugin

@{
    ViewBag.Title = "Verify Plugin";
}

<h2>Verify Plugin (click to expand)</h2>
<input type="hidden" name="PluginId" id="PluginId" value="@Model.PluginId" />

<div id="draggableSection" class="draggableSection">
    <h5>Required</h5>
    <label id="reportNameDrag" class="dragger">Report Name</label>
    <label id="hostListDrag" class="dragger">Host List</label>
    <label id="hostDrag" class="dragger">Host</label>
    <label id="hostipDrag" class="dragger">Host IP</label>
    <label id="openPortListDrag" class="dragger">Open Port List</label>
    <label id="openPortDrag" class="dragger">Open Port</label>
    <label id="portNumberDrag" class="dragger">Port Number</label>
    
    <h5>Optional</h5>
    <label id="hostosDrag" class="dragger">Host Operating System</label>
    <label id="hostNameDrag" class="dragger">Host Computer Name</label>
    <label id="portProtocolDrag" class="dragger">Port Protocol</label>
    <label id="portSeverityDrag" class="dragger">Port Severity</label>
    <label id="portThreatLevelDrag" class="dragger">Port Threat Level</label>
    <label id="portDescriptionDrag" class="dragger">Port Description</label>

    <p>You can either drag these elements to their respective places, or type the value into the text field</p>
</div>

<h3 onclick="toggleObject(@("\"" + Model.name + "\""))" class="objectName">@Model.name <input class="dropper" id="@(Model.name)" type="text" /></h3>

<div id="@("id" + Model.name)" class="objectData">
    <ul>
    @foreach (string field in Model.stringFields)
    {
        <li>@field
            <input class="dropper" id="@(@Model.name + "," + field)" type="text" />
        </li>
    }

    @if (Model.nestedObjects.Count > 0)
    {
        @Html.Partial("_DynamicPluginPartial", Model.nestedObjects)
    }
    </ul>
</div>

<button type="button" onclick="SubmitData()">Go.</button>

<script type="text/javascript">
    var results = new Object();

    $(document).ready(function () {
        $(".objectData").hide();
        $(".dropper").width(120);
        $(window).scroll(function () {
            var offset = $(".draggableSection").offset();
            $(".draggableSection").stop().animate({ "marginTop": ($(window).scrollTop()) + "px" }, "slow");
        });

        results.PluginId = $("#PluginId").val();
        results.ReportName = "",
        results.HostList = "",
        results.Host = "",
        results.HostIP = "",
        results.HostOS = "",
        results.HostName = "",
        results.OpenPortList = "",
        results.OpenPort = "",
        results.PortNumber = "",
        results.PortProtocol = "",
        results.PortSeverity = "",
        results.PortThreatLevel = "",
        results.PortDescription = ""
    });

    function SubmitData() {
        var values = $(".dropper").filter(function () { return $(this).val(); });

        for (var i = 0; i < values.length; i++) {
            switch (values[i].value) {
                case "Report Name":
                    results.ReportName = values[i].id;
                    break;
                case "Host List":
                    results.HostList = values[i].id;
                    break;
                case "Host":
                    results.Host = values[i].id;
                    break;
                case "Host IP":
                    results.HostIP = values[i].id;
                    break;
                case "Host Operating System":
                    results.HostOS = values[i].id;
                    break;
                case "Host Computer Name":
                    results.HostName = values[i].id;
                    break;
                case "Open Port List":
                    results.OpenPortList = values[i].id;
                    break;
                case "Open Port":
                    results.OpenPort = values[i].id;
                    break;
                case "Port Number":
                    results.PortNumber = values[i].id;
                    break;
                case "Port Protocol":
                    results.PortProtocol = values[i].id;
                    break;
                case "Port Severity":
                    results.PortSeverity = values[i].id;
                    break;
                case "Port Threat Level":
                    results.PortThreatLevel = values[i].id;
                    break;
                case "Port Description":
                    results.PortDescription = values[i].id;
                    break;
                default:
            }
        }
        $.ajax(
            {
                type: "POST",
                url: "/Plugin/VerifyPlugin",
                data: JSON.stringify(results),
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                success: function (result) {
                    if (result.success)
                        alert("success");
                }
            });
    }

    function toggleObject(mName) {
        $("#id" + mName).toggle();
    }

    $(".dragger").draggable(
        {
            opacity: 0.85,
            revert: "invalid",
            snap: true,
            snapMode: "outer",
            refreshPositions: true,
            snapTolerance: 0
        });

    $(".draggableSection").droppable(
        {
            accept: ".dragger",
            tolerance: "pointer",
        });

    $(".dropper").droppable(
        {
            accept: ".dragger",
            tolerance: "pointer",
            drop: function (event, ui) {
                $(this).val(ui.draggable.text());
                ui.draggable.hide();
            },
            out: function (event, ui) {
                $(this).val("");
            }
        });
</script>