using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.IO;
using System.Web.UI;
using PenTester.Models;
using WebMatrix.WebData;
using System.Xml.Schema;
using System.Xml;


namespace PenTester.Controllers
{
    public class ScansController : Controller
    {
        public ActionResult Index()
        {
            Entities db = new Entities();
            UserProfile user = db.UserProfiles.Single(u => u.UserId == WebSecurity.CurrentUserId);
            ScanIndexModel model = new ScanIndexModel()
            {
                GroupList = user.GroupsIn
            };

            return View(model);
        }

        [HttpPost]
        public ActionResult Index(ScanIndexModel model)
        {
            if (ModelState.IsValid)
            {
                if (model.Action == "Upload")
                    return RedirectToAction("Upload", new { groupId = model.selectedGroupId });
                if (model.Action == "Delete")
                    return RedirectToAction("Delete", new { groupId = model.selectedGroupId });
            }
            return RedirectToAction("Index");
        }

        public ActionResult Upload(int groupId)
        {
            Entities db = new Entities();
            UserProfile user = db.UserProfiles.Single(u => u.UserId == WebSecurity.CurrentUserId);
            Group query = user.GroupsIn.Single(g => g.GroupId == groupId);

            ScanUploadModel model = new ScanUploadModel()
            {
                PluginList = query.Plugins.Union(db.Plugins.Where(p => p.OwnerID == 1)),
                GroupId = groupId
            };

            return View(model);
        }

        [HttpPost]
        public ActionResult Upload(ScanUploadModel model)
        {
            if (ModelState.IsValid)
            {
                Entities db = new Entities();
                UserProfile user = db.UserProfiles.Single(u => u.UserId == WebSecurity.CurrentUserId);
                Group group = user.GroupsIn.Single(g => g.GroupId == model.GroupId);
                Plugin plugin = db.Plugins.Single(p => p.PluginID == model.selectedPluginId);

                string newId = Guid.NewGuid().ToString();
                string path = Server.MapPath("~/Groups/" + model.GroupId + "/Scans/" + newId);
                model.file.SaveAs(path);

                //TODO: Check validity of scan against DTD
                //Currently assuming that the scan is valid.
                //if (ParseScan(path, model))
                {
                    if (model.strParseError != "" || model.strParseError != null)
                    {
                        group.Scans.Add(new Scan()
                        {
                            OriginalFilename = model.file.FileName,
                            GeneratedFilename = newId,
                            ProcessorType = plugin.PluginID,
                            IsProcessed = false,
                            DateUploaded = DateTime.Now
                        });

                        db.SaveChanges();

                        return RedirectToAction("Index");
                    }
                }
            }

            return View(model);
        }

        public ActionResult Delete(int groupId)
        {
            Entities db = new Entities();
            UserProfile user = db.UserProfiles.Single(u => u.UserId == WebSecurity.CurrentUserId);
            Group query = user.GroupsIn.Single(g => g.GroupId == groupId);

            ScanDeleteModel model = new ScanDeleteModel()
            {
                ScanList = query.Scans,
                GroupId = groupId
            };

            return View(model);
        }

        [HttpPost]
        public ActionResult Delete(ScanDeleteModel model)
        {
            if (ModelState.IsValid)
            {
                Entities db = new Entities();
                UserProfile user = db.UserProfiles.Single(u => u.UserId == WebSecurity.CurrentUserId);
                Group group = user.GroupsIn.Single(g => g.GroupId == model.GroupId);
                Scan scan = group.Scans.Single(p => p.ScanId == model.selectedScanId);

                db.Scans.Remove(scan);
                db.SaveChanges();

                System.IO.File.Delete(Server.MapPath("~/Groups/" + model.GroupId + "/Scans/" + scan.GeneratedFilename));

                return RedirectToAction("Index");
            }
            else
            {
                return View(model);
            }
        }

        [HttpPost]
        public bool ParseScan(string path, ScanUploadModel model)
        {
            string strValidationError = "";

            //Validate File path, assume valid DTD
            if (HasFile(model.file))
            {
                //Call ReportValidate(Filepath, DTD?)
                //Needs to save report in order to verify, if report is valid, keep on file server. Delete if invalid
                Entities db = new Entities();
                UserProfile user = db.UserProfiles.Single(u => u.UserId == WebSecurity.CurrentUserId);
                Group group = user.GroupsIn.Single(g => g.GroupId == model.GroupId);

                strValidationError = ScanVerifier(path);

                //Print out error results
                model.strParseError = strValidationError;

                return true;
            }
            else
                return false;
        }

        private static string GstrParseError;
        public string ScanVerifier(string path) //pass in( file , DTD ) 
        {
            GstrParseError = "";

            // Set the validation settings.
            XmlReaderSettings settings = new XmlReaderSettings();
            settings.DtdProcessing = DtdProcessing.Parse;
            settings.ValidationType = ValidationType.DTD;
            settings.ValidationEventHandler += new ValidationEventHandler(ValidationCallBack);

            System.IO.Stream str = new System.IO.FileStream(path, System.IO.FileMode.Open, System.IO.FileAccess.Read);

            // Create the XmlReader object.
            XmlReader reader = XmlReader.Create(str, settings);

            //Parses through reader and checks validity 
            while (reader.Read()) ;

            reader.Close();
            str.Close();

            //Fail, delete file

            return GstrParseError; //(If error list is populated, failed. Else, success)
        }

        // Display any validation errors.
        public static void ValidationCallBack(object sender, ValidationEventArgs e)
        {
            //System.Diagnostics.Debug.WriteLine("Validation Error: {" + GintLineCount + "}", e.Message);

            GstrParseError += "{Line " + e.Exception.LineNumber + "} " + e.Severity + ": " + e.Message + "<br />";
        }

        public static bool HasFile(HttpPostedFileBase file)
        {
            //System.Diagnostics.Debug.WriteLine(file.FileName);
            return (file != null && file.ContentLength > 0);
        }


        //public string FileUpload(HttpPostedFileBase file)
        //{
        //    // Verify that the user selected a file
        //    if (HasFile(file))
        //    {
        //        // extract only the fielname
        //        var fileName = Path.GetFileName(file.FileName);

        //        // store the file inside ~/App_Data/uploads folder
        //        string path = Path.Combine(Server.MapPath("~/Reports/" + WebSecurity.CurrentUserId), fileName);
        //        if (PathExists(path))
        //        {

        //        }
        //        else
        //        {
        //            file.SaveAs(path);
        //        }
        //        return path;
        //    }
        //    // redirect back to the index action to show the form once again
        //    return null;
        //}


        //public bool PathExists(string path)
        //{
        //    // get the file attributes for file or directory
        //    FileAttributes attr = System.IO.File.GetAttributes(@"c:\Temp");

        //    //detect whether its a directory or file
        //    if ((attr & FileAttributes.Directory) == FileAttributes.Directory)
        //    {//directory
        //        return System.IO.File.Exists(path);
        //    }
        //    else
        //    {//File
        //        return Directory.Exists(path);
        //    }

        //}
    }
}
