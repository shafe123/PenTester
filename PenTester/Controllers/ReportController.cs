using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Web.Mvc;
using System.Web.DataAccess;
using System.Xml;
using System.Xml.Schema;
using System.IO;

using PenTester.Models;
using WebMatrix.WebData;

// Remove RM.


namespace PenTester.Controllers
{
    public class ReportController : Controller
    {
        //private static int GintLineCount = 0;
        private static string GstrParseError = "";

        //Populate dropdown list of plugins
        public ActionResult Index() 
        {
            Entities db = new Entities();

            var query = db.Plugins;

            var model = new ReportUploadModel
            {
                List = query.AsEnumerable<Plugin>()
            };
            return View(model);
        }

        [HttpPost]
        [AllowAnonymous]
        public ActionResult ParseResults(ReportUploadModel model)
        {
            string strValidationError = "";

            //Validate File path, assume valid DTD
            if (HasFile(model.file))
            {
                //Call ReportValidate(Filepath, DTD)
                strValidationError = ReportVerifier(model.file);
                
                //Print out error results
                model.strParseError = strValidationError;
            }
 
            return View(model);
        }

        public string ReportVerifier(HttpPostedFileBase ReportFile) //pass in( file , DTD ) 
        {
            GstrParseError = "";

            // Set the validation settings.
            XmlReaderSettings settings = new XmlReaderSettings();
            settings.DtdProcessing = DtdProcessing.Parse;
            settings.ValidationType = ValidationType.DTD;
            settings.ValidationEventHandler += new ValidationEventHandler(ValidationCallBack);

            System.IO.Stream str = new System.IO.FileStream(FileUpload(ReportFile), System.IO.FileMode.Open, System.IO.FileAccess.Read);

            // Create the XmlReader object.
            XmlReader reader = XmlReader.Create(str, settings);


            //Parses through reader and checks validity 
            while (reader.Read());
            

            reader.Close();
            str.Close();

            //Fail, delete file

            return GstrParseError; //(If error list is populated, failed. Else, success)
        }

        // Display any validation errors.
        public static void ValidationCallBack(object sender, ValidationEventArgs e)
        {
            //System.Diagnostics.Debug.WriteLine("Validation Error: {" + GintLineCount + "}", e.Message);

            GstrParseError += " _____ {Line " + e.Exception.LineNumber + "} " + e.Severity + ": " + e.Message + "_____<br />";
        }

        public static bool HasFile(HttpPostedFileBase file)
        {
            //System.Diagnostics.Debug.WriteLine(file.FileName);
            return (file != null && file.ContentLength > 0) ? true : false;
        }


        public string FileUpload(HttpPostedFileBase file)
        {
            // Verify that the user selected a file
            if (HasFile(file))
            {
                // extract only the fielname
                    var fileName = Path.GetFileName(file.FileName);
                
                // store the file inside ~/App_Data/uploads folder
                    string path = Path.Combine(Server.MapPath("~/Reports/" + WebSecurity.CurrentUserId), fileName);
                    System.Diagnostics.Debug.WriteLine(path);
                    file.SaveAs(path);
                    return path;
            }
            // redirect back to the index action to show the form once again
            return null;
        }
    }
}
