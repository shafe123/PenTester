using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Web.Mvc;
using System.Web.DataAccess;
using System.Xml;
using System.Xml.Schema;
using System.IO;
using System.Windows;
using System.Web.UI;
using PenTester.Models;
using WebMatrix.WebData;
using PenTester.Objects;
using System.Xml.Serialization;
using PenTester.Objects.Nmap;
using PenTester.Objects.Nessus;


// Remove RM.


namespace PenTester.Controllers
{
    public class ReportsController : Controller
    {
        public ActionResult Index()
        {
            Entities db = new Entities();
            UserProfile user = db.UserProfiles.Single(u => u.UserId == WebSecurity.CurrentUserId);

            return View(user.GroupsIn);
        }

        [HttpPost]
        public ActionResult Index(int selectedGroupId)
        {
            Entities db = new Entities();
            UserProfile user = db.UserProfiles.Single(u => u.UserId == WebSecurity.CurrentUserId);
            if (user.GroupsIn.Count(g => g.GroupId == selectedGroupId) >= 1)
                return RedirectToAction("Create", new { groupId = selectedGroupId });
            else
                return RedirectToAction("Index");
        }

        public ActionResult Create(int groupId)
        {
            Entities db = new Entities();

            IEnumerable<Scan> query = db.UserProfiles.Single(u => u.UserId == WebSecurity.CurrentUserId).GroupsIn.Single(g => g.GroupId == groupId).Scans;

            var model = new CreateReportModel
            {
                List = query,
                groupId = groupId
            };
            return View(model);
        }

        [HttpPost]
        public ActionResult Create(CreateReportModel model)
        {
            Entities db = new Entities();
            UserProfile user = db.UserProfiles.Single(u => u.UserId == WebSecurity.CurrentUserId);
            Group groupIn = user.GroupsIn.Single(g => g.GroupId == model.groupId);
            ICollection<Scan> ownedScans = groupIn.Scans;

            List<Scan> scans = new List<Scan>();

            foreach (int scanId in model.SelectedScanIds)
            {
                scans.Add(ownedScans.Single(s => s.ScanId == scanId));
            }

            ReportTemplate reportTemp = new ReportTemplate();
            foreach (Scan s in scans)
            {
                string path = Server.MapPath("~/Groups/" + groupIn.GroupId + "/Scans/" + s.GeneratedFilename);
                System.IO.FileStream file = new FileStream(path, FileMode.Open);

                if (s.Plugin.PluginName == "nmap")
                {
                    XmlSerializer ser = new XmlSerializer(typeof(NmapReport));
                    NmapReport nmap = (NmapReport)ser.Deserialize(file);
                    reportTemp.AddReport(nmap);
                }
                else if (s.Plugin.PluginName == "nessus")
                {
                    XmlSerializer ser = new XmlSerializer(typeof(NessusReport));
                    NessusReport nessus = (NessusReport)ser.Deserialize(file);
                    reportTemp.AddReport(nessus);
                }
                else if (s.Plugin.PluginName == "zapp")
                {

                }
                else
                {

                }
            }

            return RedirectToAction("View", new { report = reportTemp });
        }

        public ActionResult View(ReportTemplate report)
        {
            return View(report);
        }

        /*
        * ==============================================================================
        * ActionResult(s)
        * Delete a Report
        *==============================================================================
        */

        public ActionResult DeleteReport()
        {
            Entities db = new Entities();
            var query = db.Reports;

            var model = new ReportDeleteModel
            {
                List = query.AsEnumerable<Report>()
            };

            return View(model);
        }

        [HttpPost]
        public ActionResult DeleteReport(ReportDeleteModel model)
        {
            Entities db = new Entities();
            var query = db.Reports;

            model = new ReportDeleteModel
            {
                List = query.AsEnumerable<Report>()
            };

            //If successful delete
            model.strDeleteMessage = "File Deleted";

            return View(model);
        }
    }
}
