using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Web.Mvc;
using System.Web.DataAccess;
using System.Xml;
using System.Xml.Schema;
using System.IO;
using System.Windows;
using System.Web.UI;
using PenTester.Models;
using WebMatrix.WebData;


// Remove RM.


namespace PenTester.Controllers
{
    public class ReportController : Controller
    {

        //private static int GintLineCount = 0;
        private static string GstrParseError = "";
        static string[] _words = { "Sam", "Dot", "Perls" };

        public ActionResult Index()
        {
            return View();
        }

/*
* ==============================================================================
* ActionResult(s)
* Upload a Report
*==============================================================================
*/

        //Populate dropdown list of plugins
        public ActionResult ReportUpload()
        {
            Entities db = new Entities();
            var query = db.Plugins;

            var model = new ReportUploadModel
            {
                List = query.AsEnumerable<Plugin>()
            };
            return View(model);
        }

        [HttpPost]
        public ActionResult ParsedReport(ReportUploadModel model)
        {
            string strValidationError = "";

            //Validate File path, assume valid DTD
            if (HasFile(model.file))
            {
                //Call ReportValidate(Filepath, DTD?)
                //Needs to save report in order to verify, if report is valid, keep on file server. Delete if invalid
                strValidationError = ReportVerifier(model.file);

                //Print out error results
                model.strParseError = strValidationError;
            }

            return View(model);
        }
/*
 * ==============================================================================
 * ActionResult(s)
 * Create a Report
 *==============================================================================
 */

        public ActionResult ResultsWriter()
        {
            Entities db = new Entities();
            var query = db.Reports;

            var model = new ReportWriterModel
            {
                List = query.AsEnumerable<Report>()
            };
            return View(model);
        }

        [HttpPost]
        public ActionResult DownloadResult(ReportWriterModel model)
        {
            //for each( item in selected report list)
            //  
            model.strHTML = CreateHtMLPage();
            System.Diagnostics.Debug.WriteLine(model.strHTML);
            
            return View(model);
        }

/*
* ==============================================================================
* ActionResult(s)
* Delete a Report
*==============================================================================
*/

        public ActionResult DeleteReport()
        {
            Entities db = new Entities();
            var query = db.Reports;
            
            var model = new ReportDeleteModel
            {
                List = query.AsEnumerable<Report>()
            };

            return View(model);
        }

        [HttpPost]
        public ActionResult DeleteReport(ReportDeleteModel model)
        {
            Entities db = new Entities();
            var query = db.Reports;

            model = new ReportDeleteModel
            {
                List = query.AsEnumerable<Report>()
            };

            //If successful delete
            model.strDeleteMessage = "File Deleted";

            return View(model);
        }

/*
* ==============================================================================
* Function(s)
* 
*==============================================================================
*/

        public string ReportVerifier(HttpPostedFileBase ReportFile) //pass in( file , DTD ) 
        {
            GstrParseError = "";

            // Set the validation settings.
            XmlReaderSettings settings = new XmlReaderSettings();
            settings.DtdProcessing = DtdProcessing.Parse;
            settings.ValidationType = ValidationType.DTD;
            settings.ValidationEventHandler += new ValidationEventHandler(ValidationCallBack);

            System.IO.Stream str = new System.IO.FileStream(FileUpload(ReportFile), System.IO.FileMode.Open, System.IO.FileAccess.Read);

            // Create the XmlReader object.
            XmlReader reader = XmlReader.Create(str, settings);


            //Parses through reader and checks validity 
            while (reader.Read()) ;


            reader.Close();
            str.Close();

            //Fail, delete file

            return GstrParseError; //(If error list is populated, failed. Else, success)
        }

        // Display any validation errors.
        public static void ValidationCallBack(object sender, ValidationEventArgs e)
        {
            //System.Diagnostics.Debug.WriteLine("Validation Error: {" + GintLineCount + "}", e.Message);

            GstrParseError += "{Line " + e.Exception.LineNumber + "} " + e.Severity + ": " + e.Message + "<br />";
        }

        public static bool HasFile(HttpPostedFileBase file)
        {
            //System.Diagnostics.Debug.WriteLine(file.FileName);
            return (file != null && file.ContentLength > 0) ? true : false;
        }


        public string FileUpload(HttpPostedFileBase file)
        {
            // Verify that the user selected a file
            if (HasFile(file))
            {
                // extract only the fielname
                var fileName = Path.GetFileName(file.FileName);

                // store the file inside ~/App_Data/uploads folder
                string path = Path.Combine(Server.MapPath("~/Reports/" + WebSecurity.CurrentUserId), fileName);
                if (PathExists(path))
                {
                    
                }
                else
                {
                    file.SaveAs(path);
                }
                return path;
            }
            // redirect back to the index action to show the form once again
            return null;
        }


        public bool PathExists(string path)
        {
            // get the file attributes for file or directory
            FileAttributes attr = System.IO.File.GetAttributes(@"c:\Temp");

            //detect whether its a directory or file
            if ((attr & FileAttributes.Directory) == FileAttributes.Directory)
            {//directory
                return System.IO.File.Exists(path);
            }
            else
            {//File
                return Directory.Exists(path);
            }

        }

        public string CreateHtMLPage()
        {
            // Initialize StringWriter instance.
            StringWriter stringWriter = new StringWriter();

            // Put HtmlTextWriter in using block because it needs to call Dispose.
            using (HtmlTextWriter writer = new HtmlTextWriter(stringWriter))
            {
                writer.AddAttribute(HtmlTextWriterAttribute.Id, "wrapper");
                writer.RenderBeginTag(HtmlTextWriterTag.Div);

                writer.AddAttribute(HtmlTextWriterAttribute.Id, "fields");
                writer.RenderBeginTag(HtmlTextWriterTag.Div);
                writer.RenderEndTag();
                writer.WriteLine();
                writer.AddAttribute(HtmlTextWriterAttribute.Id, "main");
                writer.RenderBeginTag(HtmlTextWriterTag.Div);
                writer.RenderEndTag();
                writer.RenderEndTag();
            }
            // Return the result.
            return stringWriter.ToString();
        }
            
    }
}
