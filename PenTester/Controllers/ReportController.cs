using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Web.Mvc;
using System.Web.DataAccess;
using System.Xml;
using System.Xml.Schema;
using System.IO;
using System.Windows;
using System.Web.UI;
using PenTester.Models;
using WebMatrix.WebData;
using PenTester.Objects;
using System.Xml.Serialization;
using PenTester.Objects.Nmap;
using PenTester.Objects.Nessus;


// Remove RM.


namespace PenTester.Controllers
{
    public class ReportsController : Controller
    {
        public ActionResult Index()
        {
            Entities db = new Entities();
            UserProfile user = db.UserProfiles.Single(u => u.UserId == WebSecurity.CurrentUserId);

            return View(user.GroupsIn);
        }

        [HttpPost]
        public ActionResult Index(int selectedGroupId, string Action)
        {
            
            Entities db = new Entities();
            UserProfile user = db.UserProfiles.Single(u => u.UserId == WebSecurity.CurrentUserId);

            if (Action == "Create")
            {
                if (user.GroupsIn.Count(g => g.GroupId == selectedGroupId) >= 1)
                    return RedirectToAction("Create", new { groupId = selectedGroupId });
            }
            else if (Action == "View")
            {
                if (user.GroupsIn.Count(g => g.GroupId == selectedGroupId) >= 1)
                    return RedirectToAction("ViewIndex", new { groupId = selectedGroupId });
            }
            
            return RedirectToAction("Index");
        }

        public ActionResult Create(int groupId)
        {
            Entities db = new Entities();

            IEnumerable<Scan> query = db.UserProfiles.Single(u => u.UserId == WebSecurity.CurrentUserId).GroupsIn.Single(g => g.GroupId == groupId).Scans;

            var model = new CreateReportModel
            {
                List = query,
                groupId = groupId
            };
            return View(model);
        }

        [HttpPost]
        public ActionResult Create(CreateReportModel model)
        {
            if (ModelState.IsValid)
            {
                Entities db = new Entities();
                UserProfile user = db.UserProfiles.Single(u => u.UserId == WebSecurity.CurrentUserId);
                Group groupIn = user.GroupsIn.Single(g => g.GroupId == model.groupId);
                ICollection<Scan> ownedScans = groupIn.Scans;

                List<Scan> scans = new List<Scan>();

                foreach (int scanId in model.SelectedScanIds)
                {
                    scans.Add(ownedScans.Single(s => s.ScanId == scanId));
                }

                Report report = new Report()
                {
                    DateProcessed = DateTime.Now,
                    ReportName = model.ReportName
                };

                foreach (Scan s in scans)
                    report.Scans.Add(s);

                groupIn.Reports.Add(report);
                db.SaveChanges();

                return RedirectToAction("View", new { reportId = report.ReportId, groupId = report.OwnerId });
            }

            return View(model);
        }

        public ActionResult ViewIndex(int groupId)
        {
            Entities db = new Entities();
            ViewBag.groupId = groupId;
            List<Report> reports = db.UserProfiles.Single(u => u.UserId == WebSecurity.CurrentUserId)
                                                    .GroupsIn.Single(g => g.GroupId == groupId)
                                                    .Reports.ToList();

            return View(reports);
        }

        [HttpPost]
        public ActionResult ViewIndex(int selectedReportId, int groupId)
        {
            return RedirectToAction("View", new { reportId = selectedReportId, groupId = groupId });
        }

        public ActionResult View(int reportId, int groupId)
        {
            Entities db = new Entities();
            List<Scan> scans = db.UserProfiles.Single(u => u.UserId == WebSecurity.CurrentUserId)
                                                .GroupsIn.Single(g => g.GroupId == groupId)
                                                .Reports.Single(r => r.ReportId == reportId)
                                                .Scans.ToList();
            ReportTemplate reportTemp = new ReportTemplate();
            foreach (Scan s in scans)
            {
                string path = Server.MapPath("~/Groups/" + groupId + "/Scans/" + s.GeneratedFilename);
                System.IO.FileStream file = new FileStream(path, FileMode.Open);

                if (s.Plugin.PluginName == "nmap")
                {
                    XmlSerializer ser = new XmlSerializer(typeof(NmapReport));
                    NmapReport nmap = (NmapReport)ser.Deserialize(file);
                    reportTemp.AddReport(nmap);
                }
                else if (s.Plugin.PluginName == "nessus")
                {
                    XmlSerializer ser = new XmlSerializer(typeof(NessusReport));
                    NessusReport nessus = (NessusReport)ser.Deserialize(file);
                    reportTemp.AddReport(nessus);
                }
                else if (s.Plugin.PluginName == "zapp")
                {

                }
                else
                {

                }
            }

            reportTemp.Hosts = reportTemp.Hosts.OrderBy(h => h.IPAddress).ToList();
            foreach (ReportTemplate.Host h in reportTemp.Hosts)
                h.OpenPorts = h.OpenPorts.OrderBy(p => p.Number).ThenBy(p => p.Severity).ToList();

            return View(reportTemp);
        }

        /*
        * ==============================================================================
        * ActionResult(s)
        * Delete a Report
        *==============================================================================
        */

        public ActionResult DeleteReport()
        {
            Entities db = new Entities();
            var query = db.Reports;

            var model = new ReportDeleteModel
            {
                List = query.AsEnumerable<Report>()
            };

            return View(model);
        }

        [HttpPost]
        public ActionResult DeleteReport(ReportDeleteModel model)
        {
            Entities db = new Entities();
            var query = db.Reports;

            model = new ReportDeleteModel
            {
                List = query.AsEnumerable<Report>()
            };

            //If successful delete
            model.strDeleteMessage = "File Deleted";

            return View(model);
        }
    }
}
