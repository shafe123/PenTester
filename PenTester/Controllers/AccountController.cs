using System;
using System.Collections.Generic;
using System.Linq;
using System.Transactions;
using System.Web;
using System.Web.Mvc;
using System.Web.Security;
using DotNetOpenAuth.AspNet;
using Microsoft.Web.WebPages.OAuth;
using WebMatrix.WebData;
using PenTester.Filters;
using PenTester.Models;
using System.Net.Mail;
using System.Net;
using System.Web.Script.Serialization;

namespace PenTester.Controllers
{
    public class AccountController : Controller
    {
        #region Login/Logoff
        //
        // GET: /Account/Login

        [AllowAnonymous]
        public ActionResult Login(string returnUrl)
        {
            ViewBag.ReturnUrl = returnUrl;
            
            return View();
        }

        //
        // POST: /Account/Login

        [HttpPost]
        [AllowAnonymous]
        [ValidateAntiForgeryToken]
        public ActionResult Login(LoginModel model, string returnUrl)
        {
            if (ModelState.IsValid && WebSecurity.Login(model.UserName, model.Password, persistCookie: model.RememberMe))
            {
                HttpCookie auth = new HttpCookie("PenTester");
                auth.Values.Add("username", model.UserName);
                auth.Values.Add("sessionID", Session.SessionID);
                auth.Values.Add("expirDate", DateTime.Now.AddMinutes(10).ToString());


                auth.Expires = DateTime.Now.AddMinutes(10);

                HttpContext.Response.AppendCookie(auth);
                
                return RedirectToLocal(returnUrl);
            }

            // If we got this far, something failed, redisplay form
            ModelState.AddModelError("", "The user name or password provided is incorrect.");
            return View(model);
        }

        //
        // POST: /Account/LogOff

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult LogOff()
        {
            WebSecurity.Logout();

            return RedirectToAction("Index", "Home");
        }

        //
        // GET: /Account/ChangePassword
        #endregion

        #region Registration
        //
        // GET: /Account/Register

        [AllowAnonymous]
        public ActionResult Register()
        {
            return View();
        }

        //
        // POST: /Account/Register

        [HttpPost]
        [AllowAnonymous]
        [ValidateAntiForgeryToken]
        public ActionResult Register(RegisterModel model)
        {
            if (ModelState.IsValid)
            {
                // Attempt to register the user
                try
                {
                    Entities db = new Entities();

                    string token = WebSecurity.CreateUserAndAccount(model.UserName, model.Password, null, true);

                    int id = db.webpages_Membership.Where(ent => ent.ConfirmationToken == token).First().UserId;

                    UserProfile profile = db.UserProfiles.Single(user => user.UserId == id);
                    db.SaveChanges();

                    string root = HttpContext.Request.Url.Authority;
                    string link = "http://" + root + "/Account/ConfirmToken/" + HttpUtility.UrlEncode(profile.UserName) + "/" + HttpUtility.UrlEncode(token);

                    MailMessage m = new MailMessage("TextFileGuys@pentest.com",
                                                    model.UserName);
                    m.Subject = "PenTester Verification";
                    m.IsBodyHtml = true;
                    m.Body = "Test Body - " +
                        String.Format("<a href=\"" + link + "\">Verify</a>");

                    SendMail(m);

                    return RedirectToAction("Index", "Home");
                }
                catch (MembershipCreateUserException e)
                {
                    ModelState.AddModelError("", ErrorCodeToString(e.StatusCode));
                }
            }

            // If we got this far, something failed, redisplay form
            return View(model);
        }

        [AllowAnonymous]
        public ActionResult ConfirmToken(string username, string token)
        {
            if (WebSecurity.ConfirmAccount(username, token))
            {
                ViewBag.Authenticated = true;

                Entities db = new Entities();
                int UserId = db.webpages_Membership.Single(ent => ent.ConfirmationToken == token).UserId;
                UserProfile profile = db.UserProfiles.Single(ent => ent.UserId == UserId);

                Group newGroup = new Group()
                {
                    CreatedBy = profile.UserId,
                    Name = profile.UserName,
                    JoinLink = Guid.NewGuid().ToString()
                };

                profile.GroupsIn.Add(newGroup);
                db.SaveChanges();

                newGroup.FileDirectory = Server.MapPath("/Groups/" + newGroup.GroupId);
                System.IO.Directory.CreateDirectory(newGroup.FileDirectory);
                System.IO.Directory.CreateDirectory(newGroup.FileDirectory + "/Reports");
                System.IO.Directory.CreateDirectory(newGroup.FileDirectory + "/Plugins");
                System.IO.Directory.CreateDirectory(newGroup.FileDirectory + "/Scans");

                db.SaveChanges();
            }
            else
            {
                ViewBag.Authenticated = false;
            }
            return View();
        }
        #endregion

        #region Management
        public ActionResult Manage()
        {
            Entities db = new Entities();

            return View(db.UserProfiles.Single(u => u.UserId == WebSecurity.CurrentUserId));
        }

        public ActionResult ChangePassword()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult ChangePassword(LocalPasswordModel model)
        {
            ViewBag.ReturnUrl = Url.Action("Manage");
            if (ModelState.IsValid)
            {
                // ChangePassword will throw an exception rather than return false in certain failure scenarios.
                try
                {
                    if (WebSecurity.ChangePassword(User.Identity.Name, model.OldPassword, model.NewPassword))
                    {
                        return RedirectToAction("Manage", new { Message = ManageMessageId.ChangePasswordSuccess });
                    }
                }
                catch (Exception)
                {
                    ModelState.AddModelError("", "The current password is incorrect or the new password is invalid.");
                }
            }

            // If we got this far, something failed, redisplay form
            return View(model);
        }

        [AllowAnonymous]
        public ActionResult ResetPassword()
        {
            return View();
        }

        [HttpPost]
        [AllowAnonymous]
        public ActionResult ResetPassword(string emailAddress)
        {
            Entities db = new Entities();
            UserProfile pro = db.UserProfiles.Single(u => u.UserName == emailAddress);
            if (pro != null)
            {
                string passwordReset = WebSecurity.GeneratePasswordResetToken(pro.UserName, 10080);

                MailMessage m = new MailMessage("TextFileGuys@pentest.com", pro.UserName);
                m.IsBodyHtml = true;

                string root = HttpContext.Request.Url.Authority;
                string link = "http://" + root + "/Account/ResetConfirm/" + HttpUtility.UrlEncode(passwordReset);

                m.Body = "Reset your <a href=" + link + ">here</a>.";
                SendMail(m);
            }
            return RedirectToAction("Index", "Home");
        }

        [AllowAnonymous]
        public ActionResult ResetConfirm(string resetToken)
        {
            ViewBag.reset = resetToken;

            ResetPasswordModel m = new ResetPasswordModel() { ResetToken = resetToken };
            return View(m);
        }

        [HttpPost]
        [AllowAnonymous]
        public ActionResult ResetConfirm(ResetPasswordModel model)
        {
            if (ModelState.IsValid)
            {
                bool resetSuccess;
                try
                {
                    resetSuccess = WebSecurity.ResetPassword(model.ResetToken, model.NewPassword);
                }
                catch
                {
                    resetSuccess = false;
                }
                if (!resetSuccess)
                {
                    ModelState.AddModelError("Error resetting password", "There was an error resetting your password, please try again.");
                    return View(model);
                }

                return RedirectToAction("Index", "Home");
            }
            else
            {
                return View(model);
            }
        }
        #endregion

        #region Groups
        [HttpPost]
        public void RemoveMembership(int id)
        {
            Entities db = new Entities();
            UserProfile profile = db.UserProfiles.Single(p => p.UserId == WebSecurity.CurrentUserId);

            IQueryable<Group> groups = db.Groups.Where(g => g.GroupId == id);
            if (groups.Count() > 0)
            {
                profile.GroupsIn.Remove(db.Groups.Single(g => g.GroupId == id));
                db.SaveChanges();
            }
        }

        public ActionResult CreateGroup()
        {
            return View();
        }

        [HttpPost]
        public ActionResult CreateGroup(Group model)
        {
            if (ModelState.IsValid)
            {
                Entities db = new Entities();
                UserProfile pro = db.UserProfiles.Single(u => u.UserId == WebSecurity.CurrentUserId);
                model.CreatedBy = pro.UserId;
                model.JoinLink = Guid.NewGuid().ToString();

                pro.GroupsIn.Add(model);
                db.SaveChanges();

                model.FileDirectory = Server.MapPath("/Groups/" + model.GroupId);

                System.IO.Directory.CreateDirectory(model.FileDirectory);
                System.IO.Directory.CreateDirectory(model.FileDirectory + "/Reports");
                System.IO.Directory.CreateDirectory(model.FileDirectory + "/Plugins");
                System.IO.Directory.CreateDirectory(model.FileDirectory + "/Scans");

                db.SaveChanges();

                return RedirectToAction("Manage");
            }
            else
                return View(model);
        }

        public ActionResult JoinGroup(string token)
        {
            Entities db = new Entities();
            IQueryable<Group> match = db.Groups.Where(g => g.JoinLink == token);
            if (match.Count() > 0)
            {
                Group grpJoined = match.First();

                ViewBag.Message = "Congratulations, you have joined group " + grpJoined.Name + "!";
                UserProfile profile = db.UserProfiles.Single(p => p.UserId == WebSecurity.CurrentUserId);

                profile.GroupsIn.Add(grpJoined);
                db.SaveChanges();
            }
            else
            {
                ViewBag.Message = "Sorry, there was an error, please check your group join link.";
            }

            return View();
        }
        #endregion

        #region Helpers
        private ActionResult RedirectToLocal(string returnUrl)
        {
            if (Url.IsLocalUrl(returnUrl))
            {
                return Redirect(returnUrl);
            }
            else
            {
                return RedirectToAction("Index", "Home");
            }
        }

        public enum ManageMessageId
        {
            ChangePasswordSuccess,
            SetPasswordSuccess,
            RemoveLoginSuccess,
            SetManagerSuccess,
            SetManagerFailure
        }

        private static void SendMail(MailMessage m)
        {
            SmtpClient client = new SmtpClient("smtp.gmail.com", 587);
            client.EnableSsl = true;
            client.Credentials = new NetworkCredential("dsupentester@gmail.com", "TesslinTesslin");
            try
            {
                client.Send(m);
            }
            catch
            {
                throw new NotImplementedException();
            }
        }

        private static string ErrorCodeToString(MembershipCreateStatus createStatus)
        {
            // See http://go.microsoft.com/fwlink/?LinkID=177550 for
            // a full list of status codes.
            switch (createStatus)
            {
                case MembershipCreateStatus.DuplicateUserName:
                    return "User name already exists. Please enter a different user name.";

                case MembershipCreateStatus.DuplicateEmail:
                    return "A user name for that e-mail address already exists. Please enter a different e-mail address.";

                case MembershipCreateStatus.InvalidPassword:
                    return "The password provided is invalid. Please enter a valid password value.";

                case MembershipCreateStatus.InvalidEmail:
                    return "The e-mail address provided is invalid. Please check the value and try again.";

                case MembershipCreateStatus.InvalidAnswer:
                    return "The password retrieval answer provided is invalid. Please check the value and try again.";

                case MembershipCreateStatus.InvalidQuestion:
                    return "The password retrieval question provided is invalid. Please check the value and try again.";

                case MembershipCreateStatus.InvalidUserName:
                    return "The user name provided is invalid. Please check the value and try again.";

                case MembershipCreateStatus.ProviderError:
                    return "The authentication provider returned an error. Please verify your entry and try again. If the problem persists, please contact your system administrator.";

                case MembershipCreateStatus.UserRejected:
                    return "The user creation request has been canceled. Please verify your entry and try again. If the problem persists, please contact your system administrator.";

                default:
                    return "An unknown error occurred. Please verify your entry and try again. If the problem persists, please contact your system administrator.";
            }
        }
        #endregion
    }
}
