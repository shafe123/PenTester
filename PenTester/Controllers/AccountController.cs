using System;
using System.Collections.Generic;
using System.Linq;
using System.Transactions;
using System.Web;
using System.Web.Mvc;
using System.Web.Security;
using DotNetOpenAuth.AspNet;
using Microsoft.Web.WebPages.OAuth;
using WebMatrix.WebData;
using PenTester.Filters;
using PenTester.Models;
using System.Net.Mail;
using System.Net;
using System.Web.Script.Serialization;

namespace PenTester.Controllers
{
    [Authorize]
    [InitializeSimpleMembership]
    public class AccountController : Controller
    {
        //
        // GET: /Account/Login

        [AllowAnonymous]
        public ActionResult Login(string returnUrl)
        {
            ViewBag.ReturnUrl = returnUrl;
            return View();
        }
        
        //
        // GET: /Account/SampleView

        public ActionResult ChangePassword(string returnUrl)
        {
            ViewBag.ReturnUrl = returnUrl;
            return View();
        }

        //
        // GET: /Account/SampleView

        public ActionResult PluginManager(string returnUrl)
        {
            ViewBag.ReturnUrl = returnUrl;
            return View();
        }

        //
        // POST: /Account/Login

        [HttpPost]
        [AllowAnonymous]
        [ValidateAntiForgeryToken]
        public ActionResult Login(LoginModel model, string returnUrl)
        {
            if (ModelState.IsValid && WebSecurity.Login(model.UserName, model.Password, persistCookie: model.RememberMe))
            {
                return RedirectToLocal(returnUrl);
            }

            // If we got this far, something failed, redisplay form
            ModelState.AddModelError("", "The user name or password provided is incorrect.");
            return View(model);
        }

        //
        // POST: /Account/LogOff

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult LogOff()
        {
            WebSecurity.Logout();

            return RedirectToAction("Index", "Home");
        }

        //
        // GET: /Account/Register

        [AllowAnonymous]
        public ActionResult Register()
        {
            return View();
        }

        //
        // POST: /Account/Register

        [HttpPost]
        [AllowAnonymous]
        [ValidateAntiForgeryToken]
        public ActionResult Register(RegisterModel model)
        {
            if (ModelState.IsValid)
            {
                // Attempt to register the user
                try
                {
                    Entities db = new Entities();

                    string token = WebSecurity.CreateUserAndAccount(model.UserName, model.Password, null, true);

                    int id = db.webpages_Membership.Where(ent => ent.ConfirmationToken == token).First().UserId;

                    UserProfile profile = db.UserProfiles.Single(user => user.UserId == id);
                    profile.IsManager = model.Manager;
                    profile.ManagerName = model.ManagerName;
                    profile.DirectoryPath = Server.MapPath("~\\Scans\\" + profile.UserId);
                    db.SaveChanges();

                    string root = HttpContext.Request.Url.Authority;
                    string link = "http://" + root + "/Account/ConfirmToken/" + HttpUtility.UrlEncode(profile.UserName) + "/" + HttpUtility.UrlEncode(token);

                    MailMessage m = new MailMessage("test@pentest.com",
                                                    model.UserName);
                    m.Subject = "PenTester Verification";
                    m.IsBodyHtml = true;
                    m.Body = "Test Body - " +
                        String.Format("<a href=\"" + link + "\">Verify</a>");

                    SmtpClient client = new SmtpClient("smtp.gmail.com", 587);
                    client.EnableSsl = true;
                    client.Credentials = new NetworkCredential("dsupentester@gmail.com", "TesslinTesslin");
                    try 
                    { 
                        client.Send(m); 
                    }
                    catch 
                    { 
                        throw new NotImplementedException(); 
                    }
                    
                    return RedirectToAction("Index", "Home");
                }
                catch (MembershipCreateUserException e)
                {
                    ModelState.AddModelError("", ErrorCodeToString(e.StatusCode));
                }
            }

            // If we got this far, something failed, redisplay form
            return View(model);
        }

        [AllowAnonymous]
        public ActionResult ConfirmToken(string username, string token)
        {
            if (WebSecurity.ConfirmAccount(username, token))
            {
                ViewBag.Authenticated = true;

                Entities db = new Entities();
                int UserId = db.webpages_Membership.Single(ent => ent.ConfirmationToken == token).UserId;
                UserProfile pro = db.UserProfiles.Single(ent => ent.UserId == UserId);
                System.IO.Directory.CreateDirectory(pro.DirectoryPath);

                UserProfile manager = db.UserProfiles.FirstOrDefault(ent => ent.UserName == pro.ManagerName);

                if (manager != null)
                {
                    ManagerApproval approval = new ManagerApproval()
                    {
                        IsApproved = false,
                        ManagerUserId = manager.UserId,
                        UserId = pro.UserId
                    };
                    db.ManagerApprovals.Add(approval);
                    db.SaveChanges();
                }
            }
            else
            {
                ViewBag.Authenticated = false;
            }
            return View();
        }

        //
        // POST: /Account/Disassociate

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Disassociate(string provider, string providerUserId)
        {
            string ownerAccount = OAuthWebSecurity.GetUserName(provider, providerUserId);
            ManageMessageId? message = null;

            // Only disassociate the account if the currently logged in user is the owner
            if (ownerAccount == User.Identity.Name)
            {
                // Use a transaction to prevent the user from deleting their last login credential
                using (var scope = new TransactionScope(TransactionScopeOption.Required, new TransactionOptions { IsolationLevel = IsolationLevel.Serializable }))
                {
                    bool hasLocalAccount = OAuthWebSecurity.HasLocalAccount(WebSecurity.GetUserId(User.Identity.Name));
                    if (hasLocalAccount || OAuthWebSecurity.GetAccountsFromUserName(User.Identity.Name).Count > 1)
                    {
                        OAuthWebSecurity.DeleteAccount(provider, providerUserId);
                        scope.Complete();
                        message = ManageMessageId.RemoveLoginSuccess;
                    }
                }
            }

            return RedirectToAction("Manage", new { Message = message });
        }

        //
        // GET: /Account/Manage

        public ActionResult Manage(ManageMessageId? message)
        {
            Entities db = new Entities();

            ViewBag.StatusMessage =
                message == ManageMessageId.ChangePasswordSuccess ? "Your password has been changed."
                : message == ManageMessageId.SetPasswordSuccess ? "Your password has been set."
                : message == ManageMessageId.RemoveLoginSuccess ? "The external login was removed."
                : message == ManageMessageId.SetManagerSuccess ? "Manager changed successfully."
                : "";

            ViewBag.StatusFailure =
                message == ManageMessageId.SetManagerFailure ? "Please enter a valid email address."
                : "";


            ViewBag.HasLocalPassword = OAuthWebSecurity.HasLocalAccount(WebSecurity.GetUserId(User.Identity.Name));
            ViewBag.ReturnUrl = Url.Action("Manage");

            UserProfile pro = db.UserProfiles.Single(ent => ent.UserId == WebSecurity.CurrentUserId);
            ViewBag.IsManager = pro.IsManager;

            if (pro.IsManager.Value)
            {
                List<ManagerApproval> approvals = db.ManagerApprovals.Where(m => m.ManagerUserId == pro.UserId).ToList<ManagerApproval>();
                List<ApproveManageesModel> managees = new List<ApproveManageesModel>();

                foreach (ManagerApproval app in approvals)
                {
                    managees.Add(new ApproveManageesModel()
                    {
                        UserId = app.UserId,
                        UserName = db.UserProfiles.Single(u => u.UserId == app.UserId).UserName,
                        Approved = app.IsApproved,
                        ManagerId = app.ManagerUserId
                    });
                }

                ViewBag.Managees = managees.AsEnumerable();
            }

            return View();
        }

        //
        // POST: /Account/Manage

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Manage(LocalPasswordModel model)
        {
            ViewBag.ReturnUrl = Url.Action("Manage");
            if (ModelState.IsValid)
            {
                // ChangePassword will throw an exception rather than return false in certain failure scenarios.
                try
                {
                    if (WebSecurity.ChangePassword(User.Identity.Name, model.OldPassword, model.NewPassword))
                    {
                        return RedirectToAction("Manage", new { Message = ManageMessageId.ChangePasswordSuccess });
                    }
                }
                catch (Exception)
                {
                    ModelState.AddModelError("", "The current password is incorrect or the new password is invalid.");
                }
            }

            // If we got this far, something failed, redisplay form
            return View(model);
        }

        [HttpPost]
        public ActionResult Password(ManagerModel model)
        {
            if (ModelState.IsValid)
            {
                Entities db = new Entities();
                UserProfile profile = db.UserProfiles.Single(ent => ent.UserId == WebSecurity.CurrentUserId);
                profile.ManagerName = model.NewManager;

                db.SaveChanges();

                return RedirectToAction("Manage", new { Message = ManageMessageId.SetManagerSuccess });
            }

            return RedirectToAction("Manage", new { Message = ManageMessageId.SetManagerFailure });
        }

        [AcceptVerbs(HttpVerbs.Post)]
        public void Approve(ApproveManageesModel json)
        {
            //JavaScriptSerializer jss = new JavaScriptSerializer();
            //ApproveManageesModel model = jss.Deserialize<ApproveManageesModel>(json.ToString());

            Entities db = new Entities();
            int managerId = db.UserProfiles.Single(u => User.Identity.Name == u.UserName).UserId;

            db.ManagerApprovals.Single(app => app.ManagerUserId == managerId 
                                            && app.UserId == json.UserId).IsApproved = json.Approved;
            db.SaveChanges();
        }

        #region Helpers
        private ActionResult RedirectToLocal(string returnUrl)
        {
            if (Url.IsLocalUrl(returnUrl))
            {
                return Redirect(returnUrl);
            }
            else
            {
                return RedirectToAction("Index", "Home");
            }
        }

        public enum ManageMessageId
        {
            ChangePasswordSuccess,
            SetPasswordSuccess,
            RemoveLoginSuccess,
            SetManagerSuccess,
            SetManagerFailure
        }

        internal class ExternalLoginResult : ActionResult
        {
            public ExternalLoginResult(string provider, string returnUrl)
            {
                Provider = provider;
                ReturnUrl = returnUrl;
            }

            public string Provider { get; private set; }
            public string ReturnUrl { get; private set; }

            public override void ExecuteResult(ControllerContext context)
            {
                OAuthWebSecurity.RequestAuthentication(Provider, ReturnUrl);
            }
        }

        private static string ErrorCodeToString(MembershipCreateStatus createStatus)
        {
            // See http://go.microsoft.com/fwlink/?LinkID=177550 for
            // a full list of status codes.
            switch (createStatus)
            {
                case MembershipCreateStatus.DuplicateUserName:
                    return "User name already exists. Please enter a different user name.";

                case MembershipCreateStatus.DuplicateEmail:
                    return "A user name for that e-mail address already exists. Please enter a different e-mail address.";

                case MembershipCreateStatus.InvalidPassword:
                    return "The password provided is invalid. Please enter a valid password value.";

                case MembershipCreateStatus.InvalidEmail:
                    return "The e-mail address provided is invalid. Please check the value and try again.";

                case MembershipCreateStatus.InvalidAnswer:
                    return "The password retrieval answer provided is invalid. Please check the value and try again.";

                case MembershipCreateStatus.InvalidQuestion:
                    return "The password retrieval question provided is invalid. Please check the value and try again.";

                case MembershipCreateStatus.InvalidUserName:
                    return "The user name provided is invalid. Please check the value and try again.";

                case MembershipCreateStatus.ProviderError:
                    return "The authentication provider returned an error. Please verify your entry and try again. If the problem persists, please contact your system administrator.";

                case MembershipCreateStatus.UserRejected:
                    return "The user creation request has been canceled. Please verify your entry and try again. If the problem persists, please contact your system administrator.";

                default:
                    return "An unknown error occurred. Please verify your entry and try again. If the problem persists, please contact your system administrator.";
            }
        }
        #endregion
    }
}
