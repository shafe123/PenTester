using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Transactions;
using System.Web;
using System.Web.Mvc;
using System.Web.Security;
using DotNetOpenAuth.AspNet;
using Microsoft.Web.WebPages.OAuth;
using WebMatrix.WebData;
using PenTester.Filters;
using PenTester.Models;
using System.Net.Mail;
using System.Net;
using System.Web.Script.Serialization;
using PenTester.Controllers;

namespace PenTester.Controllers
{
    public class PluginController : Controller
    {
        public ActionResult Upload(UploadMessageId? message)
        {

            //Cookie cutter from Controllers/AccountControlller.cs, just changed to work with plugins.
            //Question mark is to allow for null values.
            //Good description here http://stackoverflow.com/questions/446835/what-do-two-question-marks-together-mean-in-c
            ViewBag.StatusMessage =
            message == UploadMessageId.UploadPluginSuccess ? "Your Plugin has successfully been uploaded."
            : message == UploadMessageId.UploadPluginFailure ? "Your Plugin was not successfully uploaded."
            : message == UploadMessageId.PluginPathError ? "Your Plugin was not moved to the server."
            : message == UploadMessageId.PluginExistsError ? "The plugin you selected already exists."
            : "";

            ViewBag.StatusFailure =
                message == UploadMessageId.PluginErrorMessage ? "There was an error uploading your plugin, please try again."
                : "";

            return View("Upload");
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Upload(HttpPostedFileBase fileToUpload, PluginModel plugin)
        {
            if (ModelState.IsValid)
            {
                try
                {
                    string fileName = Path.GetFileName(fileToUpload.FileName);
                    
                    //combining the fileName from above and the path into one variable
                    
                    //  *******************TO BE IMPLEMENTED SOON**********************
                    //this mappath will change with new updates, location will need to be changed
                    //Need to add General DTD to check against the plugins loaded up.

                    string filePath = Path.Combine(Server.MapPath("/Plugins"), fileName);

                    if (fileToUpload != null)
                    {
                        if (System.IO.File.Exists(filePath))
                        {
                            return RedirectToAction("Upload", "Plugin", new { Message = UploadMessageId.PluginExistsError });
                        }
                        else
                        {
                            try
                            {
                                fileToUpload.SaveAs(filePath);
                            }
                            catch
                            {
                                return RedirectToAction("Upload", "Plugin", new { Message = UploadMessageId.PluginPathError });
                            }
                        }
                        //update the database with successful upload
                        Entities db = new Entities();
                        Plugin toUpload = new Plugin()
                        {
                            PluginName = plugin.nameOfUpload,
                            PluginPath = filePath,
                            PluginGenerated = Guid.NewGuid().ToString()
                        };

                        db.Plugins.Add(toUpload);
                        db.SaveChanges();

                        return RedirectToAction("Upload", "Plugin", new { Message = UploadMessageId.UploadPluginSuccess });
                    }
                    else
                    {
                        return RedirectToAction("Upload", "Plugin", new { Message = UploadMessageId.PluginPathError });
                    }
                }
                catch (Exception)
                {
                    return RedirectToAction("Upload", "Plugin", new { Message = UploadMessageId.UploadPluginFailure });
                }
            }

            //Something is wrong if code execution goes past the try/catch statement.

            return View("Upload");
        }

        //copied directly from ReportController with changes to work with plugin. Same functionality
        public ActionResult Delete(DeleteMessageId? message)
        {
            //Cookie cutter from Controllers/AccountControlller.cs, just changed to work with plugins.
            //Question mark is to allow for null values.
            //Good description here http://stackoverflow.com/questions/446835/what-do-two-question-marks-together-mean-in-c
            ViewBag.StatusMessage =
            message == DeleteMessageId.RemovePluginSuccess ? "Your Plugin was successfully removed."
            : message == DeleteMessageId.RemovePluginFailure ? "Your Plugin was not successfully removed."
            : "";

            ViewBag.StatusFailure =
                message == DeleteMessageId.PluginErrorMessage ? "There was an error deleting your plugin, please try again."
                : "";

            Entities db = new Entities();

            var pluginIdConverter = db.Plugins.Local;

            string pluginIdToString = pluginIdConverter.Select(c => c.PluginID).ToString();
            
            var query = db.Plugins.Select(c => new SelectListItem
            {
                Value = c.PluginGenerated,
                Text = c.PluginName
            });

            var model = new PluginDropDown
            {
                List = query.ToList()
            };
            return View(model);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Delete(PluginDropDown pluginToDelete )
        {
            if (ModelState.IsValid)
            {
                Entities db = new Entities();
                Plugin databasePlugin;

                try
                {
                    databasePlugin = db.Plugins.Find( pluginToDelete.PluginGenerated);

                }
                catch
                {
                    return RedirectToAction("Delete", "Plugin", new { Message = DeleteMessageId.PluginErrorMessage });
                }
                //retrieve string to delete file off server
                string databasePluginFilePath = databasePlugin.PluginPath;

                //update database first
                db.Plugins.Remove(databasePlugin);
                db.SaveChanges();

                if (System.IO.File.Exists(databasePluginFilePath))
                {
                    try
                    {
                        System.IO.File.Delete(databasePluginFilePath);

                        return RedirectToAction("Delete", "Plugin", new { Message = DeleteMessageId.RemovePluginSuccess });
                    }
                    catch
                    {
                        return RedirectToAction("Delete", "Plugin", new { Message = DeleteMessageId.RemovePluginFailure });
                    }
                }

            }

            //Default return. Once functionality is complete, this return should only be reached if something goes wrong
            return View("Delete");
        }

        //Also cookie cutter
        public enum UploadMessageId
        {
            UploadPluginSuccess,
            UploadPluginFailure,
            PluginErrorMessage,
            PluginPathError,
            PluginExistsError
        }

        public enum DeleteMessageId
        {
            RemovePluginSuccess,
            RemovePluginFailure,
            PluginErrorMessage
        }




    }
}
