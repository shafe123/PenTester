using System;
using System.Collections.Generic;
using System.Linq;
using System.Transactions;
using System.Web;
using System.Web.Mvc;
using System.Web.Security;
using DotNetOpenAuth.AspNet;
using Microsoft.Web.WebPages.OAuth;
using WebMatrix.WebData;
using PenTester.Filters;
using PenTester.Models;
using System.Net.Mail;
using System.Net;
using System.Web.Script.Serialization;
using PenTester.Controllers;

namespace PenTester.Controllers
{
    public class PluginController : Controller
    {
        public ActionResult Upload(PluginMessageId? message)
        {

            //Cookie cutter from Controllers/AccountControlller.cs, just changed to work with plugins.
            //Question mark is to allow for null values.
            //Good description here http://stackoverflow.com/questions/446835/what-do-two-question-marks-together-mean-in-c
            ViewBag.StatusMessage =
            message == PluginMessageId.UploadPluginSuccess ? "Your Plugin has successfully been uploaded."
            : message == PluginMessageId.UploadPluginFailure ? "Your Plugin was not successfully uploaded."
            : message == PluginMessageId.RemovePluginSuccess ? "Your Plugin was successfully removed."
            : message == PluginMessageId.RemovePluginFailure ? "Your Plugin was not successfully removed."
            : "";

            ViewBag.StatusFailure =
                message == PluginMessageId.PluginErrorMessage ? "There was an error uploading your plugin, please try again."
                : "";

            return View("Index");
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Upload(PluginModel plugin)
        {
            if (ModelState.IsValid)
            {                    
                try
                {
                    Entities db = new Entities();
                    Plugin toUpload = new Plugin()
                    {
                        PluginName = plugin.PluginName,
                        PluginPath = plugin.PluginFile,
                        PluginGenerated = plugin.PluginFile
                    };

                    db.Plugins.Add(toUpload);
                    db.SaveChanges();

                    return RedirectToAction("Upload", "Plugin", new { Message = PluginMessageId.UploadPluginSuccess });
                }
                catch (Exception)
                {
                    return RedirectToAction("Upload", "Plugin", new { Message = PluginMessageId.PluginErrorMessage });
                }
            }

            //Something is wrong if code execution goes past a catch statement.

            return View("_PluginPartial");
        }

        //Also cookie cutter
        public enum PluginMessageId
        {
            UploadPluginSuccess,
            UploadPluginFailure,
            RemovePluginSuccess,
            RemovePluginFailure,
            PluginErrorMessage
        }






    }
}
