using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Transactions;
using System.Web;
using System.Web.Mvc;
using System.Web.Security;
using DotNetOpenAuth.AspNet;
using Microsoft.Web.WebPages.OAuth;
using WebMatrix.WebData;
using PenTester.Filters;
using PenTester.Models;
using System.Net.Mail;
using System.Net;
using System.Web.Script.Serialization;
using PenTester.Controllers;
using System.Diagnostics;

namespace PenTester.Controllers
{
    public class PluginController : Controller
    {
        public ActionResult Upload(UploadMessageId? message)
        {

            //Cookie cutter from Controllers/AccountControlller.cs, just changed to work with plugins.
            //Question mark is to allow for null values.
            //Good description here http://stackoverflow.com/questions/446835/what-do-two-question-marks-together-mean-in-c
            ViewBag.StatusMessage =
            message == UploadMessageId.UploadPluginSuccess ? "Your Plugin has successfully been uploaded."
            : message == UploadMessageId.UploadPluginFailure ? "Your Plugin was not successfully uploaded."
            : message == UploadMessageId.PluginPathError ? "Your Plugin was not moved to the server."
            : message == UploadMessageId.PluginExistsError ? "The plugin you selected already exists."
            : message == UploadMessageId.UserNotFound ? "Could not verify ID. Plugin not uploaded."
            : "";

            ViewBag.StatusFailure =
                message == UploadMessageId.PluginErrorMessage ? "There was an error uploading your plugin, please try again."
                : "";

            Entities db = new Entities();
            List<Group> groupsUserInArray;

            groupsUserInArray = db.UserProfiles.Single(u => u.UserId == WebSecurity.CurrentUserId).GroupsIn.ToList();

            var model = new PluginModel
            {
                uploadList = groupsUserInArray
            };

            return View(model);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Upload(HttpPostedFileBase fileToUpload, PluginModel plugin)
        {
            if (ModelState.IsValid)
            {
                try
                {
                    Entities db = new Entities();

                    //Get the selected group from the database using the groupId
                    Group uploadGroup = db.Groups.Single(g => g.GroupId == plugin.selectedGroupId);

                    Plugin toUpload = new Plugin()
                    {
                        PluginName = plugin.nameOfUpload,
                        PluginGenerated = Guid.NewGuid().ToString()
                    };
                    uploadGroup.Plugins.Add(toUpload);
                    db.SaveChanges();

                    //xsd.exe requires a '.xml' on the end of the file
                    string filePath = Path.Combine(Server.MapPath("~/Groups/" + plugin.selectedGroupId + "/Plugins"), toUpload.PluginGenerated + ".xml");

                    if (fileToUpload != null)
                    {
                        if (System.IO.File.Exists(filePath))
                        {
                            return RedirectToAction("Upload", "Plugin", new { Message = UploadMessageId.PluginExistsError });
                        }
                        else
                        {
                            try
                            {
                                fileToUpload.SaveAs(filePath);
                            }
                            catch
                            {
                                return RedirectToAction("Upload", "Plugin", new { Message = UploadMessageId.PluginPathError });
                            }
                        }
                        //update the database with successful upload
                        //Load XML into cs file
                        CreateCSFile(filePath);
                        //present class to user without attributes
                        LoadCSIntoAssembly(filePath.Replace(".xml", ".cs"));
                        //add custom attributes based on user input
                        //save class file
                        //dynamically load class as needed
                        //parse using the class's custom attributes




                        return RedirectToAction("Upload", "Plugin", new { Message = UploadMessageId.UploadPluginSuccess });
                    }
                }
                catch (Exception)
                {
                    return RedirectToAction("Upload", "Plugin", new { Message = UploadMessageId.UploadPluginFailure });
                }
            }

            //Something is wrong if code execution goes past the try/catch statement.

            return View(plugin);
        }

        private void CreateCSFile(string xmlPath)
        {
            ProcessStartInfo psi = new ProcessStartInfo("C:\\Program Files (x86)\\Microsoft SDKs\\Windows\\v8.0A\\bin\\NETFX 4.0 Tools\\xsd.exe");
            psi.Arguments = xmlPath + " /outputdir:\"" + Path.GetDirectoryName(xmlPath) + "\"";

            System.Diagnostics.Process p = new System.Diagnostics.Process();
            p.StartInfo = psi;
            p.Start();
            p.WaitForExit();

            string xsdPath = xmlPath.Replace(".xml", ".xsd");
            psi.Arguments = xsdPath + " /classes /outputdir:\"" + Path.GetDirectoryName(xmlPath) + "\"";
            p.StartInfo = psi;

            p.Start();
            p.WaitForExit();

            //TODO: delete .xsd and .xml files?
        }

        private void LoadCSIntoAssembly(string csFile)
        {

        }

        //copied directly from ReportController with changes to work with plugin. Same functionality
        public ActionResult Delete(DeleteMessageId? message)
        {
            //Cookie cutter from Controllers/AccountControlller.cs, just changed to work with plugins.
            //Question mark is to allow for null values.
            //Good description here http://stackoverflow.com/questions/446835/what-do-two-question-marks-together-mean-in-c
            ViewBag.StatusMessage =
            message == DeleteMessageId.RemovePluginSuccess ? "Your Plugin was successfully removed."
            : message == DeleteMessageId.RemovePluginFailure ? "Your Plugin was not successfully removed."
            : "";

            ViewBag.StatusFailure =
                message == DeleteMessageId.PluginErrorMessage ? "There was an error deleting your plugin, please try again."
                : "";

            Entities db = new Entities();

            var pluginIdConverter = db.Plugins.Local;

            //string pluginIdToString = pluginIdConverter.Select(c => c.PluginID).ToString();
            
            var query = db.Plugins.Select(c => new SelectListItem
            {
                Value = c.PluginGenerated,
                Text = c.PluginName
            });

            var model = new PluginDropDown
            {
                deleteList = query.ToList()
            };
            return View(model);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Delete(PluginDropDown pluginToDelete )
        {
            //TODO: Fix...
            if (ModelState.IsValid)
            {
                Entities db = new Entities();
                Plugin databasePlugin;

                try
                {
                    
                    databasePlugin = db.Plugins.Where(p => p.PluginGenerated == pluginToDelete.PluginGenerated).First();
                }
                catch
                {
                    return RedirectToAction("Delete", "Plugin", new { Message = DeleteMessageId.PluginErrorMessage });
                }
                //retrieve string to delete file off server

                //update database first
                db.Plugins.Remove(databasePlugin);
                db.SaveChanges();

                //if (System.IO.File.Exists(databasePluginFilePath))
                //{
                //    try
                //    {
                //        System.IO.File.Delete(databasePluginFilePath);

                //        return RedirectToAction("Delete", "Plugin", new { Message = DeleteMessageId.RemovePluginSuccess });
                //    }
                //    catch
                //    {
                //        return RedirectToAction("Delete", "Plugin", new { Message = DeleteMessageId.RemovePluginFailure });
                //    }
                //}

            }

            //Default return. Once functionality is complete, this return should only be reached if something goes wrong
            return View("Delete");
        }

        //Also cookie cutter
        public enum UploadMessageId
        {
            UploadPluginSuccess,
            UploadPluginFailure,
            PluginErrorMessage,
            PluginPathError,
            PluginExistsError,
            UserNotFound
        }

        public enum DeleteMessageId
        {
            RemovePluginSuccess,
            RemovePluginFailure,
            PluginErrorMessage
        }




    }
}
