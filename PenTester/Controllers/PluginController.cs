using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Transactions;
using System.Web;
using System.Web.Mvc;
using System.Web.Security;
using DotNetOpenAuth.AspNet;
using Microsoft.Web.WebPages.OAuth;
using WebMatrix.WebData;
using PenTester.Filters;
using PenTester.Models;
using System.Net.Mail;
using System.Net;
using System.Web.Script.Serialization;
using PenTester.Controllers;

namespace PenTester.Controllers
{
    public class PluginController : Controller
    {
        public ActionResult Upload(PluginMessageId? message)
        {

            //Cookie cutter from Controllers/AccountControlller.cs, just changed to work with plugins.
            //Question mark is to allow for null values.
            //Good description here http://stackoverflow.com/questions/446835/what-do-two-question-marks-together-mean-in-c
            ViewBag.StatusMessage =
            message == PluginMessageId.UploadPluginSuccess ? "Your Plugin has successfully been uploaded."
            : message == PluginMessageId.UploadPluginFailure ? "Your Plugin was not successfully uploaded."
            : message == PluginMessageId.RemovePluginSuccess ? "Your Plugin was successfully removed."
            : message == PluginMessageId.RemovePluginFailure ? "Your Plugin was not successfully removed."
            : message == PluginMessageId.PluginPathError ? "Your Plugin was not moved to the server."
            : message == PluginMessageId.PluginExistsError ? "The plugin you selected already exists."
            : "";

            ViewBag.StatusFailure =
                message == PluginMessageId.PluginErrorMessage ? "There was an error uploading your plugin, please try again."
                : "";

            return View("Index");
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Upload(HttpPostedFileBase fileToUpload, PluginModel plugin)
        {
            if (ModelState.IsValid)
            {
                try
                {
                    string fileName = Path.GetFileName(fileToUpload.FileName);
                    
                    //combining the fileName from above and the path into one variable
                    string filePath = Path.Combine(Server.MapPath("/Plugins"), fileName);

                    if (fileToUpload != null)
                    {
                        if (System.IO.File.Exists(filePath))
                        {
                            return RedirectToAction("Upload", "Plugin", new { Message = PluginMessageId.PluginExistsError });
                        }

                        try
                        {
                            fileToUpload.SaveAs(filePath);
                        }
                        catch
                        {
                            return RedirectToAction("Upload", "Plugin", new { Message = PluginMessageId.PluginPathError});
                        }

                        //update the database with successful upload
                        Entities db = new Entities();
                        Plugin toUpload = new Plugin()
                        {
                            PluginName = plugin.nameOfUpload,
                            PluginPath = filePath,
                            PluginGenerated = plugin.nameOfUpload
                        };

                        db.Plugins.Add(toUpload);
                        db.SaveChanges();

                        return RedirectToAction("Upload", "Plugin", new { Message = PluginMessageId.UploadPluginSuccess });
                    }
                    else
                    {
                        return RedirectToAction("Upload", "Plugin", new { Message = PluginMessageId.PluginPathError });
                    }
                }
                catch (Exception)
                {
                    return RedirectToAction("Upload", "Plugin", new { Message = PluginMessageId.UploadPluginFailure });
                }
            }

            //Something is wrong if code execution goes past the try/catch statement.

            return View("_PluginPartial");
        }

        //Also cookie cutter
        public enum PluginMessageId
        {
            UploadPluginSuccess,
            UploadPluginFailure,
            RemovePluginSuccess,
            RemovePluginFailure,
            PluginErrorMessage,
            PluginPathError,
            PluginExistsError
        }






    }
}
