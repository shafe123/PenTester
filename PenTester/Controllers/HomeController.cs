using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Xml;
using System.Xml.Serialization;
using PenTester.Objects.Nessus;
using PenTester.Objects.Nmap;
using PenTester.Objects;
using System.Diagnostics;
using Roslyn.Scripting;
using Roslyn.Scripting.CSharp;
using Roslyn.Compilers.CSharp;
using System.IO;
using System.Text;
using System.Reflection;
using PenTester.Models;

namespace PenTester.Controllers
{
    public class HomeController : Controller
    {
        [AllowAnonymous]
        public ActionResult Test()
        {
            string csLoc = @"C:\Users\Ethan\SkyDrive\Code13\PenTester\PenTester\Groups\2\Plugins\68dd3bc4-981a-4d61-994c-780aa8635c51.cs";
            DynamicPlugin output = CreateDynamicPluginObject(csLoc);
            TempData["csFile"] = csLoc;

            return View(output);
        }

        [HttpPost]
        [AllowAnonymous]
        public ActionResult Test(VerifyPluginModel results)
        {
            if (ModelState.IsValid)
            {
                string csLoc = (string)TempData["csFile"];
                UpdateCSFile(csLoc, results);
                LoadCSIntoAssembly(csLoc);
            }

            return new JsonResult() { Data = new { success = ModelState.IsValid } };
        }

        private DynamicPlugin CreateDynamicPluginObject(string csFile)
        {
            bool debugging = true;
            SyntaxTree tr = SyntaxTree.ParseFile(csFile);

            StringBuilder sb = new StringBuilder();
            DynamicPlugin plugin = new DynamicPlugin(((ClassDeclarationSyntax)tr.GetRoot().Members.First(m => m is ClassDeclarationSyntax)).Identifier.ToString());
            int count = 0;
            foreach (ClassDeclarationSyntax classes in tr.GetRoot().Members.Where(m => m is ClassDeclarationSyntax))
            {
                if (classes.Identifier.ToString() == "NewDataSet")
                    continue;

                DynamicPlugin p = null;
                if (count != 0)
                {
                    p = plugin.ObjectExists(classes.Identifier.ToString());
                }
                else
                {
                    p = plugin;
                    count++;
                }
                if (debugging)
                    sb.AppendLine(classes.Identifier.ToString());
                foreach (FieldDeclarationSyntax field in classes.Members.Where(cl => cl is FieldDeclarationSyntax))
                {
                    if (field.ToString().Contains(" string "))
                    {
                        //gets the semicolon token, then the actual identifier
                        string fieldName = field.GetLastToken().GetPreviousToken().ToString().Replace("Field", "");
                        p.AddStringField(fieldName);
                        if (debugging)
                            sb.AppendLine(fieldName);
                    }
                    else
                    {
                        string typeName = field.Declaration.Type.ToString().Replace("[]", "");
                        p.AddObject(typeName);
                        if (debugging)
                            sb.AppendLine(typeName);
                    }
                }
            }
            if (debugging)
            {
                sb.AppendLine(plugin.PrintStructure());
                string text = sb.ToString();

                //output here
                System.IO.FileStream output = System.IO.File.Create(Path.GetDirectoryName(csFile) + "\\test.txt");
                byte[] bytes = UTF8Encoding.UTF8.GetBytes(text);
                output.Write(bytes, 0, bytes.Length);
                output.Close();
            }

            return plugin;
        }
        private void UpdateCSFile(string csFile, VerifyPluginModel userInput)
        {
            DynamicPlugin dp = CreateDynamicPluginObject(csFile);

            SyntaxTree tr = SyntaxTree.ParseFile(csFile);
            CompilationUnitSyntax root = tr.GetRoot();
            SyntaxList<MemberDeclarationSyntax> classes = tr.GetRoot().Members;
            PropertyDeclarationSyntax pd;
            StringBuilder sb = new StringBuilder();

            foreach (ClassDeclarationSyntax s in (classes.Where(m => m is ClassDeclarationSyntax)))
            {
                //find Host list
                if (s.Identifier.ToString() == userInput.HostList)
                {
                    ClassDeclarationSyntax hostList = s;
                    //add IDynamicHostList inheritance
                    hostList = hostList.AddBaseListTypes(Syntax.ParseTypeName(typeof(IDynamicHostList).FullName));

                    //adds a get property for where the Host List is located is
                    //needs to be located underneath the Host List Tag
                    //adds Hosts property to match the interface
                    pd = GetPropertyDeclaration("Hosts", userInput.Host, hostList.Members);
                    hostList = hostList.AddMembers(pd).NormalizeWhitespace();

                    //find class with 'ToolName'

                    sb.AppendLine(hostList.ToFullString());
                }
                else if (s.Identifier.ToString() == userInput.Host)
                {
                    //find Host class
                    ClassDeclarationSyntax host = s;
                    //add IDynamicHost inheritance
                    host = host.AddBaseListTypes(Syntax.ParseTypeName(typeof(IDynamicHost).FullName));

                    //adds PortList property to match the interface
                    pd = GetPropertyDeclaration("PortList", userInput.OpenPortList, host.Members);
                    host = host.AddMembers(pd).NormalizeWhitespace();

                    sb.AppendLine(host.ToFullString());
                }
                else if (s.Identifier.ToString() == userInput.OpenPortList)
                {
                    //find port list
                    ClassDeclarationSyntax portList = (ClassDeclarationSyntax)classes.Where(m => m is ClassDeclarationSyntax)
                                                            .Single(m => ((ClassDeclarationSyntax)m).Identifier.ToString() == userInput.OpenPortList);
                    //adds IDynamicPortList inheritance
                    portList = portList.AddBaseListTypes(Syntax.ParseTypeName(typeof(IDynamicPortList).FullName));

                    //adds OpenPorts property to match the interface
                    pd = GetPropertyDeclaration("OpenPorts", userInput.OpenPortList, portList.Members);
                    portList = portList.AddMembers(pd).NormalizeWhitespace();

                    sb.AppendLine(portList.ToFullString());
                }
                else if (s.Identifier.ToString() == userInput.OpenPort)
                {
                    //find port class
                    ClassDeclarationSyntax port = s;
                    port = port.AddBaseListTypes(Syntax.ParseTypeName(typeof(IDynamicPort).FullName));
                    port = port.NormalizeWhitespace();

                    sb.AppendLine(port.ToFullString());
                }
                else
                {
                    sb.AppendLine(s.NormalizeWhitespace().ToFullString());
                }
            }

            string final = sb.ToString();

            System.IO.File.WriteAllText(csFile, final);
        }
        private PropertyDeclarationSyntax GetPropertyDeclaration(string propertyIdentifierName, string targetFieldName, SyntaxList<MemberDeclarationSyntax> syntaxList)
        {
            string name = "";
            foreach (PropertyDeclarationSyntax prop in syntaxList.Where(m => m is PropertyDeclarationSyntax))
            {
                if (prop.Type.ToString().Contains(targetFieldName))
                {
                    name = prop.Identifier.ToString();
                    break;
                }
            }
            MemberAccessExpressionSyntax memAcc = Syntax.MemberAccessExpression(SyntaxKind.MemberAccessExpression, Syntax.ThisExpression(), Syntax.IdentifierName(name));
            ReturnStatementSyntax rs = Syntax.ReturnStatement(memAcc);
            SyntaxList<ReturnStatementSyntax> list = Syntax.List(rs);
            BlockSyntax block = Syntax.Block(list);
            AccessorDeclarationSyntax acc = Syntax.AccessorDeclaration(SyntaxKind.GetAccessorDeclaration, block);
            PropertyDeclarationSyntax pd = Syntax.PropertyDeclaration(null,
                Syntax.Token(SyntaxKind.PublicKeyword),
                Syntax.ParseTypeName(targetFieldName + "[]"),
                null,
                Syntax.Identifier(propertyIdentifierName),
                Syntax.AccessorList(Syntax.List(acc)));

            return pd;
        }
        private void LoadCSIntoAssembly(string csFile)
        {
            Compilation comp = Compilation.Create("test.dll");

        }

        [AllowAnonymous]
        public ActionResult Index(string id)
        {
            ViewBag.Message = "Modify this template to jump-start your ASP.NET MVC application.";

            if (id == "Awesome")
                ViewBag.Message = "I'm so Awesome!";

            return View();
        }

        public ActionResult About()
        {
            ViewBag.Message = "Your app description page.";

            return View();
        }

        [AllowAnonymous]
        public ActionResult Contact()
        {
            ViewBag.Message = "Your contact page.";

            return View();
        }
    }
}
