using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Xml;
using System.Xml.Serialization;
using PenTester.Objects.Nessus;
using PenTester.Objects.Nmap;
using PenTester.Objects;
using System.Diagnostics;
using Roslyn.Scripting;
using Roslyn.Scripting.CSharp;
using Roslyn.Compilers.CSharp;
using System.IO;
using System.Text;
using System.Reflection;

namespace PenTester.Controllers
{
    public class HomeController : Controller
    {
        [AllowAnonymous]
        public ActionResult Test()
        {
            DynamicPlugin output = LoadCSIntoAssembly(@"C:\Users\Ethan\SkyDrive\Code13\PenTester\PenTester\Groups\2\Plugins\68dd3bc4-981a-4d61-994c-780aa8635c51.cs");
            return View(output);
        }

        private DynamicPlugin LoadCSIntoAssembly(string csFile)
        {
            bool debugging = true;
            SyntaxTree tr = SyntaxTree.ParseFile(csFile);

            StringBuilder sb = new StringBuilder();
            DynamicPlugin plugin = new DynamicPlugin(((ClassDeclarationSyntax)tr.GetRoot().Members.First(m => m is ClassDeclarationSyntax)).Identifier.ToString());
            int count = 0;
            foreach (ClassDeclarationSyntax classes in tr.GetRoot().Members.Where(m => m is ClassDeclarationSyntax))
            {
                if (classes.Identifier.ToString() == "NewDataSet")
                    continue;

                DynamicPlugin p = null;
                if (count != 0)
                {
                    p = plugin.ObjectExists(classes.Identifier.ToString());
                }
                else
                {
                    p = plugin;
                }
                if (debugging)
                    sb.AppendLine(classes.Identifier.ToString());
                foreach (FieldDeclarationSyntax field in classes.Members.Where(cl => cl is FieldDeclarationSyntax))
                {
                    if (field.ToString().Contains(" string "))
                    {
                        //gets the semicolon token, then the actual identifier
                        string fieldName = field.GetLastToken().GetPreviousToken().ToString().Replace("Field", "");
                        p.AddStringField(fieldName);
                        if (debugging)
                            sb.AppendLine(fieldName);
                    }
                    else
                    {
                        string typeName = field.Declaration.Type.ToString().Replace("[]", "");
                        p.AddObject(typeName);
                        if (debugging)
                            sb.AppendLine(typeName);
                    }
                }
                count++;
            }
            if (debugging)
            {
                sb.AppendLine(plugin.PrintStructure());
                string text = sb.ToString();

                //output here
                System.IO.FileStream output = System.IO.File.Create(Path.GetDirectoryName(csFile) + "\\test.txt");
                byte[] bytes = UTF8Encoding.UTF8.GetBytes(text);
                output.Write(bytes, 0, bytes.Length);
                output.Close();
            }

            return plugin;
        }

        [AllowAnonymous]
        public ActionResult Index(string id)
        {
            ViewBag.Message = "Modify this template to jump-start your ASP.NET MVC application.";

            if (id == "Awesome")
                ViewBag.Message = "I'm so Awesome!";

            return View();
        }

        public ActionResult About()
        {
            ViewBag.Message = "Your app description page.";

            return View();
        }

        [AllowAnonymous]
        public ActionResult Contact()
        {
            ViewBag.Message = "Your contact page.";

            return View();
        }
    }
}
