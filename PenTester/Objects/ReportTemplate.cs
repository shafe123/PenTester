using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace PenTester.Objects
{
    public class ReportTemplate
    {
        public ReportTemplate()
        {
            Hosts = new List<Host>();
        }

        public void AddReport(NessusReport nessus)
        {
            ReportTemplate report = this;
            foreach (Objects.Host host in nessus.Report.Hosts)
            {
                ReportTemplate.Host newHost = new ReportTemplate.Host()
                {
                    IPAddress = host.Address,
                    ComputerName = host.Properties.NetBiosName,
                    OperatingSystem = host.Properties.OperatingSystem,
                    ExtraInformation = host.Properties.tags.ToDictionary(k => k.Name, k => k.Value)
                };

                foreach (ReportItem item in host.Items)
                {
                    if (item.port == 0)
                        continue;

                    ReportTemplate.Port open = new ReportTemplate.Port()
                    {
                        Number = item.port,
                        Protocol = item.Protocol,
                        Severity = item.Severity,
                        ThreatLevel = item.RiskFactor,
                        Description = item.Description,
                        Tool = "Nessus",
                    };

                    newHost.OpenPorts.Add(open);
                }

                report.Hosts.Add(newHost);
            }
        }

        public List<Host> Hosts { get; set; }
        public class Host
        {
            public Host()
            {
                OpenPorts = new List<Port>();
                ExtraInformation = new Dictionary<string, string>();
            }

            public string IPAddress { get; set; }
            public string OperatingSystem { get; set; }
            public string ComputerName { get; set; }
            public Dictionary<string, string> ExtraInformation { get; set; }
            public List<Port> OpenPorts { get; set; }

            public int PortCount { get { return OpenPorts.GroupBy(p => p.Number).Count(); } }
            public int ThreatCount { get { return OpenPorts.Count; } }
        }

        public class Port
        {
            public Port()
            {
                ExtraInformation = new Dictionary<string, string>();
            }

            public int Number { get; set; }
            public string Protocol { get; set; }
            public int Severity { get; set; }
            public string ThreatLevel { get; set; }
            public string Description { get; set; }
            public Dictionary<string, string> ExtraInformation { get; set; }
            public string Tool { get; set; }
        }
    }
}