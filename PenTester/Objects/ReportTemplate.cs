using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace PenTester.Objects
{
    public class ReportTemplate
    {
        public ReportTemplate()
        {
            Hosts = new List<Host>();
        }

        private void FixAdd()
        {
            List<string> ips = Hosts.Select(h => h.IPAddress).ToList();
            ips.Sort();
            List<Host> fixedHosts = new List<Host>();

            string oldip = null;
            foreach (string ip in ips)
            {
                if (oldip == ip)
                    continue;

                Host fixedHost = new Host();
                List<Host> currentHosts = Hosts.Where(h => h.IPAddress == ip).ToList();
                if (currentHosts.Count > 1)
                {
                    fixedHost.IPAddress = ip;
                    fixedHost.OperatingSystem = currentHosts.OrderByDescending(h => h.OperatingSystem.Length).First().OperatingSystem;
                    fixedHost.ComputerName = currentHosts.Where(h => h.ComputerName != null).GroupBy(h => h.ComputerName).OrderByDescending(g => g.Count()).First().Key;

                    foreach (Host h in currentHosts)
                    {
                        fixedHost.OpenPorts.AddRange(h.OpenPorts);
                    }
                }
                else
                {
                    fixedHost = currentHosts.First();
                }

                fixedHosts.Add(fixedHost);
                oldip = ip;
            }

            Hosts = fixedHosts;
        }

        public void AddReport(Nessus.NessusReport nessus)
        {
            ReportTemplate report = this;
            foreach (Objects.Nessus.Host host in nessus.Report.Hosts)
            {
                ReportTemplate.Host newHost = new ReportTemplate.Host()
                {
                    IPAddress = host.Address,
                    ComputerName = host.Properties.NetBiosName,
                    OperatingSystem = host.Properties.OperatingSystem,
                    ExtraInformation = host.Properties.tags.ToDictionary(k => k.Name, k => k.Value)
                };

                foreach (Nessus.ReportItem item in host.Items)
                {
                    if (item.port == 0)
                        continue;

                    ReportTemplate.Port open = new ReportTemplate.Port()
                    {
                        Number = item.port,
                        Protocol = item.Protocol,
                        Severity = item.Severity,
                        ThreatLevel = item.RiskFactor,
                        Description = item.Description,
                        Tool = "Nessus",
                    };

                    newHost.OpenPorts.Add(open);
                }

                report.Hosts.Add(newHost);
            }

            FixAdd();
        }
        public void AddReport(Nmap.NmapReport nmap)
        {
            ReportTemplate report = this;

            foreach (Nmap.Host host in nmap.Hosts)
            {
                ReportTemplate.Host newHost = new ReportTemplate.Host()
                {
                    IPAddress = host.IPAddress
                };

                foreach (Nmap.Port p in host.PortsInformation.Ports)
                {
                    ReportTemplate.Port open = new ReportTemplate.Port()
                    {
                        Number = p.Number,
                        Protocol = p.Protocol,
                        Severity = 2,
                        ThreatLevel = "Medium",
                        Description = "Port " + p.Number + " open for " + p.Service.ServiceProduct ?? p.Service.ServiceName,
                        Tool = "nmap"
                    };

                    newHost.OpenPorts.Add(open);
                }

                newHost.OperatingSystem = (from p in host.PortsInformation.Ports
                                           where p.Service.OperatingSystem != null
                                           group p by p.Service.OperatingSystem into sp
                                           orderby sp.Count() descending
                                           select sp).First().Key;
                                          

                report.Hosts.Add(newHost);
            }
            FixAdd();
        }
        public void AddReport(IDynamicHostList dynamicPlugin)
        {
            ReportTemplate report = this;

            foreach (IDynamicHost host in dynamicPlugin.Hosts)
            {
                ReportTemplate.Host newHost = new ReportTemplate.Host()
                {
                    IPAddress = host.IP,
                    ComputerName = host.Name != null ? host.Name : "",
                    OperatingSystem = host.OperatingSystem != null ? host.OperatingSystem : ""
                };

                foreach (IDynamicPort port in host.PortList.OpenPorts)
                {
                    try { Convert.ToInt32(port.Severity); }
                    catch (FormatException e) { port.Severity = "2"; }
                    ReportTemplate.Port open = new ReportTemplate.Port()
                    {
                        Number = Convert.ToInt32(port.Number),
                        Protocol = port.Protocol != null ? port.Protocol : "",
                        Severity = Convert.ToInt32(port.Severity),
                        ThreatLevel = port.ThreatLevel != null ? port.ThreatLevel : "Low",
                        Description = port.Description != null ? port.Description : "",
                        Tool = dynamicPlugin.ToolName
                    };

                    newHost.OpenPorts.Add(open);
                }

                report.Hosts.Add(newHost);
            }
        }

        public List<Host> Hosts { get; set; }
        public class Host
        {
            public Host()
            {
                OpenPorts = new List<Port>();
                ExtraInformation = new Dictionary<string, string>();
            }

            public string IPAddress { get; set; }
            public string OperatingSystem { get; set; }
            public string ComputerName { get; set; }
            public Dictionary<string, string> ExtraInformation { get; set; }
            public List<Port> OpenPorts { get; set; }

            public int PortCount { get { return OpenPorts.GroupBy(p => p.Number).Count(); } }
            public int ThreatCount { get { return OpenPorts.Count; } }
        }

        public class Port
        {
            public Port()
            {
                ExtraInformation = new Dictionary<string, string>();
            }

            public int Number { get; set; }
            public string Protocol { get; set; }
            public int Severity { get; set; }
            public string ThreatLevel { get; set; }
            public string Description { get; set; }
            public Dictionary<string, string> ExtraInformation { get; set; }
            public string Tool { get; set; }
        }
    }
}