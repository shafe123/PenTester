using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Web;

namespace PenTester.Objects
{
    public class DynamicPlugin
    {
        public string name { get; set; }
        public DynamicPlugin parent { get; set; }
        public List<string> stringFields { get; set; }
        public List<DynamicPlugin> nestedObjects { get; set; }

        public DynamicPlugin(string name)
        {
            this.name = name;
            stringFields = new List<string>();
            nestedObjects = new List<DynamicPlugin>();
        }

        public void AddStringField(string name)
        {
            stringFields.Add(name);
        }
        public void AddObject(string name)
        {
            nestedObjects.Add(new DynamicPlugin(name) { parent = this });
        }

        public DynamicPlugin ObjectExists(string name)
        {
            if (this.name == name)
                return this;
            if (this.nestedObjects.Count == 0)
                return null;
            else if (this.nestedObjects.Where(dp => dp.name == name).Count() > 0)
                return this.nestedObjects.Single(dp => dp.name == name);
            else
            {
                foreach (DynamicPlugin dp in this.nestedObjects)
                {
                    DynamicPlugin test = dp.ObjectExists(name);
                    if (test == null)
                        continue;
                    else
                        return test;
                }
                return null;
            }
        }
        public DynamicPlugin FindString(string name)
        {
            DynamicPlugin root = ObjectExists(name.Substring(0, name.IndexOf(',')));
            if (root.stringFields.Contains(name.Remove(0, name.IndexOf(',') + 1)))
            {
                return root;
            }
            else
                return null;
        }

        public List<string> FindStringPath(string name, string startType)
        {
            //name = nmaprunHostsPortsPort,protocol
            //startType = nmaprunHostsPortsPort
            DynamicPlugin parent = FindString(name);
            List<string> path = new List<string>();

            path.Add(name.Remove(0, name.IndexOf(',')+1));

            if (parent.name != startType)
            {
                while (parent.parent != null)
                {
                    path.Add(parent.name);
                    parent = parent.parent;
                }
            }
            path.Reverse();

            return path;
        }

        public string PrintStructure()
        {
            StringBuilder sb = new StringBuilder();

            RecurseStructure(ref sb, this, "");

            return sb.ToString();
        }

        private void RecurseStructure(ref StringBuilder sb, DynamicPlugin dp, string tabs)
        {
            //print current level
            if (dp.parent != null)
                sb.AppendLine(tabs + dp.name.Replace(dp.parent.name, ""));
            else
                sb.AppendLine(tabs + dp.name);
            //indent subfields
            tabs = tabs + "\t";

            if (dp.stringFields.Count > 0)
            {
                foreach (string stringField in dp.stringFields)
                {
                    sb.AppendLine(tabs + stringField);
                }
            }
            if (dp.nestedObjects.Count > 0)
            {
                foreach (DynamicPlugin dyn in dp.nestedObjects)
                {
                    RecurseStructure(ref sb, dyn, tabs);
                }
            }
        }
    }
}