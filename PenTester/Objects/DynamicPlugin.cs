using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Web;

namespace PenTester.Objects
{
    public class DynamicPlugin
    {
        public string name { get; set; }
        public List<string> stringFields { get; set; }
        public List<DynamicPlugin> nestedObjects { get; set; }

        public DynamicPlugin(string name)
        {
            this.name = name;
            stringFields = new List<string>();
            nestedObjects = new List<DynamicPlugin>();
        }

        public void AddStringField(string name)
        {
            stringFields.Add(name);
        }
        public void AddObject(string name)
        {
            nestedObjects.Add(new DynamicPlugin(name));
        }

        public DynamicPlugin ObjectExists(string name)
        {
            if (this.nestedObjects.Count == 0)
                return null;
            else if (this.nestedObjects.Where(dp => dp.name == name).Count() > 0)
                return this.nestedObjects.Single(dp => dp.name == name);
            else
            {
                foreach (DynamicPlugin dp in this.nestedObjects)
                {
                    if (dp.ObjectExists(name) == null)
                        continue; 
                    else
                        return dp.ObjectExists(name);
                }
                return null;
            }
        }
        public string PrintStructure()
        {
            StringBuilder sb = new StringBuilder();

            RecurseStructure(ref sb, this, "");

            return sb.ToString();
        }

        private void RecurseStructure(ref StringBuilder sb, DynamicPlugin dp, string tabs)
        {
            //print current level
            sb.AppendLine(tabs + dp.name);
            //indent subfields
            tabs = tabs + "\t";

            if (dp.stringFields.Count > 0)
            {
                foreach (string stringField in dp.stringFields)
                {
                    sb.AppendLine(tabs + "string " + stringField);
                }
            }
            if (dp.nestedObjects.Count > 0)
            {
                foreach (DynamicPlugin dyn in dp.nestedObjects)
                {
                    RecurseStructure(ref sb, dyn, tabs);
                }
            }
        }
    }
}